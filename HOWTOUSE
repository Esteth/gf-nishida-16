Just copy gf.c and gf.h to your program directory.

Initialization (call before all GF16 arithmetic functions):
	GF16init();
	
For multiplication c = a * b, use
	uint16_t a, b, c;
	c = GF16mul(a, b);
	
For division c = a / b, use
	uint16_t a, b, c;
	c = GF16div(a, b);

For repeated computation like:
	uint16_t a, x[];
	for (i = 0; i < N; i++) {
		b = GFmul(a, x[i]);
	}
where 'a' is static and 'x' is an array,
you can speed up by a region computation technique.
Change the above code to:
	uint16_t a, x[], *gf_a, *_x;
	gf_a = GF16memL + GF16memIdx[a];
	_x = x;
	for (i = 0; i < N; i++) {
		b = gf_a[GF16memIdx[*_x]];
		_x++;
	}
this will halve the computation time.
For division like:
	uint16_t a, x[];
	for (i = 0; i < N; i++) {
		b = GFdiv(a, x[i]);
	}
use
	uint16_t a, x[], *gf_a, *_x;
	gf_a = GF16memH + GF16memIdx[a];
	_x = x;
	for (i = 0; i < N; i++) {
		b = *(gf_a - GF16memIdx[*_x]);
		_x++;
	}
For another division such as:
	uint16_t a, x[];
	for (i = 0; i < N; i++) {
		b = GFdiv(x[i], a);
	}
do
	uint16_t a, x[], *gf_a, *_x;
	gf_a = GF16memH - GF16memIdx[a];
	_x = x;
	for (i = 0; i < N; i++) {
		b = gf_a[GF16memIdx[*_x]];
		_x++;
	}

See also gf-bench.c under gf-bench.
gf-bench.c at gf-bench/{multiplication,division}/gf-nishida-region-16/
will be helpful for understanding the region technique.
